// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: problems.sql

package database

import (
	"context"
)

const createProblem = `-- name: CreateProblem :exec

INSERT INTO problem (id, description, title, memory_limit, time_limit, quiz_id)
VALUES (?,?,?,?,?,?)
`

type CreateProblemParams struct {
	ID          string
	Description string
	Title       string
	MemoryLimit int32
	TimeLimit   float64
	QuizID      string
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) error {
	_, err := q.db.ExecContext(ctx, createProblem,
		arg.ID,
		arg.Description,
		arg.Title,
		arg.MemoryLimit,
		arg.TimeLimit,
		arg.QuizID,
	)
	return err
}

const selectProblem = `-- name: SelectProblem :one
SELECT problem.id, problem.created_at, problem.updated_at, problem.description, problem.title, problem.memory_limit, problem.time_limit, problem.quiz_id
FROM problem
WHERE problem.id = ?
`

func (q *Queries) SelectProblem(ctx context.Context, id string) (Problem, error) {
	row := q.db.QueryRowContext(ctx, selectProblem, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Title,
		&i.MemoryLimit,
		&i.TimeLimit,
		&i.QuizID,
	)
	return i, err
}

const selectProblemIDs = `-- name: SelectProblemIDs :many
SELECT problem.id
FROM problem
INNER JOIN quiz ON problem.quiz_id = quiz.id
WHERE quiz.id = ?
`

func (q *Queries) SelectProblemIDs(ctx context.Context, id string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectProblemIDs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
