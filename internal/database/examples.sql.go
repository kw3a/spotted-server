// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: examples.sql

package database

import (
	"context"
)

const insertExample = `-- name: InsertExample :exec
INSERT INTO example
(id, problem_id, input, output)
VALUES (?, ?, ?, ?)
`

type InsertExampleParams struct {
	ID        string
	ProblemID string
	Input     string
	Output    string
}

func (q *Queries) InsertExample(ctx context.Context, arg InsertExampleParams) error {
	_, err := q.db.ExecContext(ctx, insertExample,
		arg.ID,
		arg.ProblemID,
		arg.Input,
		arg.Output,
	)
	return err
}

const selectExamples = `-- name: SelectExamples :many
SELECT example.input, example.output
FROM example
WHERE example.problem_id = ?
`

type SelectExamplesRow struct {
	Input  string
	Output string
}

func (q *Queries) SelectExamples(ctx context.Context, problemID string) ([]SelectExamplesRow, error) {
	rows, err := q.db.QueryContext(ctx, selectExamples, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectExamplesRow
	for rows.Next() {
		var i SelectExamplesRow
		if err := rows.Scan(&i.Input, &i.Output); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
