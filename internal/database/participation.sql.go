// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: participation.sql

package database

import (
	"context"
	"time"
)

const endParticipation = `-- name: EndParticipation :exec
UPDATE participation
SET expires_at = ?
WHERE participation.user_id = ? AND participation.quiz_id = ?
`

type EndParticipationParams struct {
	ExpiresAt time.Time
	UserID    string
	QuizID    string
}

func (q *Queries) EndParticipation(ctx context.Context, arg EndParticipationParams) error {
	_, err := q.db.ExecContext(ctx, endParticipation, arg.ExpiresAt, arg.UserID, arg.QuizID)
	return err
}

const participate = `-- name: Participate :exec
INSERT INTO participation (id, user_id, quiz_id)
VALUES (?, ?, ?)
`

type ParticipateParams struct {
	ID     string
	UserID string
	QuizID string
}

func (q *Queries) Participate(ctx context.Context, arg ParticipateParams) error {
	_, err := q.db.ExecContext(ctx, participate, arg.ID, arg.UserID, arg.QuizID)
	return err
}

const participationStatus = `-- name: ParticipationStatus :one
SELECT participation.id, participation.created_at, participation.updated_at, participation.expires_at, participation.user_id, participation.quiz_id
FROM participation
WHERE participation.user_id = ? AND participation.quiz_id = ?
`

type ParticipationStatusParams struct {
	UserID string
	QuizID string
}

func (q *Queries) ParticipationStatus(ctx context.Context, arg ParticipationStatusParams) (Participation, error) {
	row := q.db.QueryRowContext(ctx, participationStatus, arg.UserID, arg.QuizID)
	var i Participation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.UserID,
		&i.QuizID,
	)
	return i, err
}
