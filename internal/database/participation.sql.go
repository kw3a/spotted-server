// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: participation.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const endParticipation = `-- name: EndParticipation :exec
UPDATE participation
SET expires_at = ?
WHERE participation.user_id = ? AND participation.quiz_id = ?
`

type EndParticipationParams struct {
	ExpiresAt time.Time
	UserID    string
	QuizID    string
}

func (q *Queries) EndParticipation(ctx context.Context, arg EndParticipationParams) error {
	_, err := q.db.ExecContext(ctx, endParticipation, arg.ExpiresAt, arg.UserID, arg.QuizID)
	return err
}

const participate = `-- name: Participate :exec
INSERT INTO participation (id, user_id, quiz_id)
VALUES (?, ?, ?)
`

type ParticipateParams struct {
	ID     string
	UserID string
	QuizID string
}

func (q *Queries) Participate(ctx context.Context, arg ParticipateParams) error {
	_, err := q.db.ExecContext(ctx, participate, arg.ID, arg.UserID, arg.QuizID)
	return err
}

const participationStatus = `-- name: ParticipationStatus :one
SELECT participation.id, participation.created_at, participation.updated_at, participation.expires_at, participation.user_id, participation.quiz_id
FROM participation
WHERE participation.user_id = ? AND participation.quiz_id = ?
`

type ParticipationStatusParams struct {
	UserID string
	QuizID string
}

func (q *Queries) ParticipationStatus(ctx context.Context, arg ParticipationStatusParams) (Participation, error) {
	row := q.db.QueryRowContext(ctx, participationStatus, arg.UserID, arg.QuizID)
	var i Participation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.UserID,
		&i.QuizID,
	)
	return i, err
}

const selectApplications = `-- name: SelectApplications :many
SELECT user.id, user.created_at, user.updated_at, user.nick, user.password, user.name, user.email, user.description, user.image_url, user.number, participation.id as participation_id, participation.created_at as participation_created_at, 
  participation.expires_at as participation_expires_at
FROM user
JOIN participation ON user.id = participation.user_id
WHERE participation.quiz_id = ?
`

type SelectApplicationsRow struct {
	ID                     string
	CreatedAt              time.Time
	UpdatedAt              time.Time
	Nick                   string
	Password               string
	Name                   string
	Email                  string
	Description            string
	ImageUrl               string
	Number                 string
	ParticipationID        string
	ParticipationCreatedAt sql.NullTime
	ParticipationExpiresAt time.Time
}

func (q *Queries) SelectApplications(ctx context.Context, quizID string) ([]SelectApplicationsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectApplications, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectApplicationsRow
	for rows.Next() {
		var i SelectApplicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nick,
			&i.Password,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.ImageUrl,
			&i.Number,
			&i.ParticipationID,
			&i.ParticipationCreatedAt,
			&i.ParticipationExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
