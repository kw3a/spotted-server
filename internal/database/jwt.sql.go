// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: jwt.sql

package database

import (
	"context"
	"time"
)

const revokeRefreshJWT = `-- name: RevokeRefreshJWT :exec

DELETE FROM jwt WHERE refresh_token = ?
`

func (q *Queries) RevokeRefreshJWT(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshJWT, refreshToken)
	return err
}

const saveRefreshJWT = `-- name: SaveRefreshJWT :exec
INSERT INTO jwt
(refresh_token, created_at) VALUES 
(?, ?)
`

type SaveRefreshJWTParams struct {
	RefreshToken string
	CreatedAt    time.Time
}

func (q *Queries) SaveRefreshJWT(ctx context.Context, arg SaveRefreshJWTParams) error {
	_, err := q.db.ExecContext(ctx, saveRefreshJWT, arg.RefreshToken, arg.CreatedAt)
	return err
}

const verifyRefreshJWT = `-- name: VerifyRefreshJWT :one

SELECT COUNT(*) > 0 AS token_exists
FROM jwt
WHERE refresh_token = ?
`

func (q *Queries) VerifyRefreshJWT(ctx context.Context, refreshToken string) (bool, error) {
	row := q.db.QueryRowContext(ctx, verifyRefreshJWT, refreshToken)
	var token_exists bool
	err := row.Scan(&token_exists)
	return token_exists, err
}
