// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: links.sql

package database

import (
	"context"
)

const countLinks = `-- name: CountLinks :one
SELECT COUNT(*) AS count FROM link WHERE user_id = ?
`

func (q *Queries) CountLinks(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinks, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM link
WHERE id = ? and user_id = ?
`

type DeleteLinkParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteLink(ctx context.Context, arg DeleteLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteLink, arg.ID, arg.UserID)
	return err
}

const insertLink = `-- name: InsertLink :exec
INSERT INTO link
(id, url, name, user_id)
VALUES (?, ?, ?, ?)
`

type InsertLinkParams struct {
	ID     string
	Url    string
	Name   string
	UserID string
}

func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) error {
	_, err := q.db.ExecContext(ctx, insertLink,
		arg.ID,
		arg.Url,
		arg.Name,
		arg.UserID,
	)
	return err
}

const selectLinks = `-- name: SelectLinks :many
SELECT link.id, link.created_at, link.updated_at, link.url, link.name, link.user_id
FROM link
JOIN user ON link.user_id = user.id
WHERE user.id = ?
ORDER BY link.created_at ASC
LIMIT 10
`

func (q *Queries) SelectLinks(ctx context.Context, id string) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, selectLinks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
