// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user 
(id, nick, name, password) VALUES 
(?, ?, ?, ?)
`

type CreateUserParams struct {
	ID       string
	Nick     string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Nick,
		arg.Name,
		arg.Password,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, nick, password, name, email, description, image_url, number FROM user WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nick,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.ImageUrl,
		&i.Number,
	)
	return i, err
}

const getUserByNick = `-- name: GetUserByNick :one
SELECT id, nick, password FROM user WHERE nick = ?
`

type GetUserByNickRow struct {
	ID       string
	Nick     string
	Password string
}

func (q *Queries) GetUserByNick(ctx context.Context, nick string) (GetUserByNickRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByNick, nick)
	var i GetUserByNickRow
	err := row.Scan(&i.ID, &i.Nick, &i.Password)
	return i, err
}

const updateCell = `-- name: UpdateCell :exec
UPDATE user SET number = ? WHERE id = ?
`

type UpdateCellParams struct {
	Number string
	ID     string
}

func (q *Queries) UpdateCell(ctx context.Context, arg UpdateCellParams) error {
	_, err := q.db.ExecContext(ctx, updateCell, arg.Number, arg.ID)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE user SET email = ? WHERE id = ?
`

type UpdateEmailParams struct {
	Email string
	ID    string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updateImage = `-- name: UpdateImage :exec
UPDATE user SET image_url = ? WHERE id = ?
`

type UpdateImageParams struct {
	ImageUrl string
	ID       string
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.ExecContext(ctx, updateImage, arg.ImageUrl, arg.ID)
	return err
}

const updateUserDescription = `-- name: UpdateUserDescription :exec
UPDATE user SET description = ? WHERE id = ?
`

type UpdateUserDescriptionParams struct {
	Description string
	ID          string
}

func (q *Queries) UpdateUserDescription(ctx context.Context, arg UpdateUserDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDescription, arg.Description, arg.ID)
	return err
}
