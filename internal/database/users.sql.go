// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user 
(id, name, email, password, description, image_url) VALUES 
(?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID          string
	Name        string
	Email       string
	Password    string
	Description string
	ImageUrl    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Description,
		arg.ImageUrl,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name, email, password, description, image_url FROM user WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Description,
		&i.ImageUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password FROM user WHERE email = ?
`

type GetUserByEmailRow struct {
	ID       string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const selectApplicants = `-- name: SelectApplicants :many
SELECT user.id, user.created_at, user.updated_at, user.name, user.email, user.password, user.description, user.image_url
FROM user
JOIN participation ON user.id = participation.user_id
WHERE participation.quiz_id = ?
`

func (q *Queries) SelectApplicants(ctx context.Context, quizID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, selectApplicants, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Description,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :exec
UPDATE user SET image_url = ? WHERE id = ?
`

type UpdateImageParams struct {
	ImageUrl string
	ID       string
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.ExecContext(ctx, updateImage, arg.ImageUrl, arg.ID)
	return err
}

const updateUserDescription = `-- name: UpdateUserDescription :exec
UPDATE user SET description = ? WHERE id = ?
`

type UpdateUserDescriptionParams struct {
	Description string
	ID          string
}

func (q *Queries) UpdateUserDescription(ctx context.Context, arg UpdateUserDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDescription, arg.Description, arg.ID)
	return err
}
