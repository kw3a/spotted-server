// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: test_case_results.sql

package database

import (
	"context"
	"database/sql"
	"strings"
)

const createEmptyTestCaseResults = `-- name: CreateEmptyTestCaseResults :copyfrom
INSERT INTO test_case_result
(id, status, time, memory, test_case_id, submission_id)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateEmptyTestCaseResultsParams struct {
	ID           sql.NullString
	Status       string
	Time         string
	Memory       int32
	TestCaseID   string
	SubmissionID string
}

const createTestCaseResult = `-- name: CreateTestCaseResult :exec
INSERT INTO test_case_result
(id, status, time, memory, test_case_id, submission_id)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateTestCaseResultParams struct {
	ID           sql.NullString
	Status       string
	Time         string
	Memory       int32
	TestCaseID   string
	SubmissionID string
}

func (q *Queries) CreateTestCaseResult(ctx context.Context, arg CreateTestCaseResultParams) error {
	_, err := q.db.ExecContext(ctx, createTestCaseResult,
		arg.ID,
		arg.Status,
		arg.Time,
		arg.Memory,
		arg.TestCaseID,
		arg.SubmissionID,
	)
	return err
}

const getResults = `-- name: GetResults :many
SELECT id, status, time, memory, test_case_id, submission_id 
FROM test_case_result
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetResults(ctx context.Context, ids []sql.NullString) ([]TestCaseResult, error) {
	query := getResults
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestCaseResult
	for rows.Next() {
		var i TestCaseResult
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Time,
			&i.Memory,
			&i.TestCaseID,
			&i.SubmissionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestCaseResult = `-- name: GetTestCaseResult :one
SELECT id, status, time, memory, test_case_id, submission_id
FROM test_case_result
WHERE id =?
`

func (q *Queries) GetTestCaseResult(ctx context.Context, id sql.NullString) (TestCaseResult, error) {
	row := q.db.QueryRowContext(ctx, getTestCaseResult, id)
	var i TestCaseResult
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Time,
		&i.Memory,
		&i.TestCaseID,
		&i.SubmissionID,
	)
	return i, err
}

const updateTestCaseResult = `-- name: UpdateTestCaseResult :exec
UPDATE test_case_result SET status = ?, time = ?, memory = ?
WHERE id =? and submission_id = ? and test_case_id = ? and status = ?
`

type UpdateTestCaseResultParams struct {
	Status       string
	Time         string
	Memory       int32
	ID           sql.NullString
	SubmissionID string
	TestCaseID   string
	Status_2     string
}

func (q *Queries) UpdateTestCaseResult(ctx context.Context, arg UpdateTestCaseResultParams) error {
	_, err := q.db.ExecContext(ctx, updateTestCaseResult,
		arg.Status,
		arg.Time,
		arg.Memory,
		arg.ID,
		arg.SubmissionID,
		arg.TestCaseID,
		arg.Status_2,
	)
	return err
}
