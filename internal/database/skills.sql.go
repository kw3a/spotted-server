// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: skills.sql

package database

import (
	"context"
)

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skill
WHERE id = ? AND user_id = ?
`

type DeleteSkillParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteSkill(ctx context.Context, arg DeleteSkillParams) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, arg.ID, arg.UserID)
	return err
}

const insertSkill = `-- name: InsertSkill :exec
INSERT INTO skill
(id, user_id, name )
VALUES (?, ?, ?)
`

type InsertSkillParams struct {
	ID     string
	UserID string
	Name   string
}

func (q *Queries) InsertSkill(ctx context.Context, arg InsertSkillParams) error {
	_, err := q.db.ExecContext(ctx, insertSkill, arg.ID, arg.UserID, arg.Name)
	return err
}

const selectSkills = `-- name: SelectSkills :many
SELECT skill.id, skill.created_at, skill.updated_at, skill.name, skill.user_id
FROM skill
JOIN user ON skill.user_id = user.id
WHERE user.id = ?
ORDER BY skill.created_at ASC
LIMIT 10
`

func (q *Queries) SelectSkills(ctx context.Context, id string) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, selectSkills, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
