// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: test_cases.sql

package database

import (
	"context"
)

const getTestCases = `-- name: GetTestCases :many
SELECT problem.time_limit, problem.memory_limit, test_case.id, test_case.input, test_case.output
FROM problem
JOIN test_case 
ON problem.id = test_case.problem_id
WHERE problem_id = ?
`

type GetTestCasesRow struct {
	TimeLimit   float64
	MemoryLimit int32
	ID          string
	Input       string
	Output      string
}

func (q *Queries) GetTestCases(ctx context.Context, problemID string) ([]GetTestCasesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTestCases, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestCasesRow
	for rows.Next() {
		var i GetTestCasesRow
		if err := rows.Scan(
			&i.TimeLimit,
			&i.MemoryLimit,
			&i.ID,
			&i.Input,
			&i.Output,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTestCase = `-- name: InsertTestCase :exec
INSERT INTO test_case
(id, problem_id, input, output)
VALUES (?, ?, ?, ?)
`

type InsertTestCaseParams struct {
	ID        string
	ProblemID string
	Input     string
	Output    string
}

func (q *Queries) InsertTestCase(ctx context.Context, arg InsertTestCaseParams) error {
	_, err := q.db.ExecContext(ctx, insertTestCase,
		arg.ID,
		arg.ProblemID,
		arg.Input,
		arg.Output,
	)
	return err
}
