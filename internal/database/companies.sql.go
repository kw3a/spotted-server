// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: companies.sql

package database

import (
	"context"
	"database/sql"
)

const getCompanies = `-- name: GetCompanies :many
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
LIMIT 10
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesByQuery = `-- name: GetCompaniesByQuery :many
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
WHERE company.name LIKE CONCAT('%', ?, '%')
LIMIT 10
`

func (q *Queries) GetCompaniesByQuery(ctx context.Context, concat interface{}) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByQuery, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesByUser = `-- name: GetCompaniesByUser :many
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
WHERE company.user_id = ?
LIMIT 10
`

func (q *Queries) GetCompaniesByUser(ctx context.Context, userID string) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesByUserAndQuery = `-- name: GetCompaniesByUserAndQuery :many
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
WHERE company.name LIKE CONCAT('%', ?, '%') AND company.user_id = ?
LIMIT 10
`

type GetCompaniesByUserAndQueryParams struct {
	CONCAT interface{}
	UserID string
}

func (q *Queries) GetCompaniesByUserAndQuery(ctx context.Context, arg GetCompaniesByUserAndQueryParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByUserAndQuery, arg.CONCAT, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
WHERE company.id = ?
`

func (q *Queries) GetCompanyByID(ctx context.Context, id string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
		&i.UserID,
	)
	return i, err
}

const insertCompany = `-- name: InsertCompany :exec
INSERT INTO company
(id, user_id, name, description, website, image_url)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertCompanyParams struct {
	ID          string
	UserID      string
	Name        string
	Description string
	Website     sql.NullString
	ImageUrl    sql.NullString
}

func (q *Queries) InsertCompany(ctx context.Context, arg InsertCompanyParams) error {
	_, err := q.db.ExecContext(ctx, insertCompany,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Website,
		arg.ImageUrl,
	)
	return err
}

const selectCompany = `-- name: SelectCompany :one
SELECT company.id, company.name, company.description, company.website, company.created_at, company.updated_at, company.image_url, company.user_id
FROM company
WHERE company.id = ? AND company.user_id = ?
`

type SelectCompanyParams struct {
	ID     string
	UserID string
}

func (q *Queries) SelectCompany(ctx context.Context, arg SelectCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, selectCompany, arg.ID, arg.UserID)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
		&i.UserID,
	)
	return i, err
}
