// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: quizzes.sql

package database

import (
	"context"
)

const getQuiz = `-- name: GetQuiz :one
SELECT id, created_at, updated_at, title, description, duration
FROM quiz
WHERE quiz.id = ?
`

func (q *Queries) GetQuiz(ctx context.Context, id string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, getQuiz, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Duration,
	)
	return i, err
}

const getQuizzes = `-- name: GetQuizzes :many
SELECT id, created_at, updated_at, title, description, duration 
FROM quiz
ORDER BY quiz.created_at DESC
LIMIT 10
`

func (q *Queries) GetQuizzes(ctx context.Context) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
