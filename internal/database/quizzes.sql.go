// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: quizzes.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getQuiz = `-- name: GetQuiz :one
SELECT quiz.id, quiz.created_at, quiz.updated_at, quiz.title, quiz.description, quiz.duration, quiz.min_wage, quiz.max_wage, quiz.user_id, user.name as author, GROUP_CONCAT(language.display_name) AS languages 
FROM quiz
JOIN user ON quiz.user_id = user.id
LEFT JOIN language_quiz ON quiz.id = language_quiz.quiz_id
LEFT JOIN language ON language_quiz.language_id = language.id
WHERE quiz.id = ?
GROUP BY quiz.id, user.name
`

type GetQuizRow struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Duration    int32
	MinWage     int32
	MaxWage     int32
	UserID      string
	Author      string
	Languages   sql.NullString
}

func (q *Queries) GetQuiz(ctx context.Context, id string) (GetQuizRow, error) {
	row := q.db.QueryRowContext(ctx, getQuiz, id)
	var i GetQuizRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.MinWage,
		&i.MaxWage,
		&i.UserID,
		&i.Author,
		&i.Languages,
	)
	return i, err
}

const getQuizzes = `-- name: GetQuizzes :many
SELECT quiz.id, quiz.created_at, quiz.updated_at, quiz.title, quiz.description, quiz.duration, quiz.min_wage, quiz.max_wage, quiz.user_id, user.name as author
FROM quiz
JOIN user ON quiz.user_id = user.id
ORDER BY quiz.created_at DESC
LIMIT 10
`

type GetQuizzesRow struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Duration    int32
	MinWage     int32
	MaxWage     int32
	UserID      string
	Author      string
}

func (q *Queries) GetQuizzes(ctx context.Context) ([]GetQuizzesRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizzesRow
	for rows.Next() {
		var i GetQuizzesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.MinWage,
			&i.MaxWage,
			&i.UserID,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizzesByQuery = `-- name: GetQuizzesByQuery :many
SELECT quiz.id, quiz.created_at, quiz.updated_at, quiz.title, quiz.description, quiz.duration, quiz.min_wage, quiz.max_wage, quiz.user_id, user.name as author
FROM quiz
JOIN user ON quiz.user_id = user.id
WHERE quiz.title LIKE CONCAT('%', ?, '%')
ORDER BY quiz.created_at DESC
LIMIT 10
`

type GetQuizzesByQueryRow struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Duration    int32
	MinWage     int32
	MaxWage     int32
	UserID      string
	Author      string
}

func (q *Queries) GetQuizzesByQuery(ctx context.Context, concat interface{}) ([]GetQuizzesByQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzesByQuery, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizzesByQueryRow
	for rows.Next() {
		var i GetQuizzesByQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.MinWage,
			&i.MaxWage,
			&i.UserID,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
