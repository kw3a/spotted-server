// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: submissions.sql

package database

import (
	"context"
)

const createSubmission = `-- name: CreateSubmission :exec
INSERT INTO submission 
(id, src, language_id, problem_id, participation_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateSubmissionParams struct {
	ID              string
	Src             string
	LanguageID      int32
	ProblemID       string
	ParticipationID string
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) error {
	_, err := q.db.ExecContext(ctx, createSubmission,
		arg.ID,
		arg.Src,
		arg.LanguageID,
		arg.ProblemID,
		arg.ParticipationID,
	)
	return err
}

const lastSubmission = `-- name: LastSubmission :one
SELECT submission.src
FROM submission
JOIN language ON submission.language_id = language.id
JOIN participation ON submission.participation_id = participation.id
WHERE submission.problem_id = ? and submission.language_id = ? and participation.user_id = ?
ORDER BY submission.created_at DESC
LIMIT 1
`

type LastSubmissionParams struct {
	ProblemID  string
	LanguageID int32
	UserID     string
}

func (q *Queries) LastSubmission(ctx context.Context, arg LastSubmissionParams) (string, error) {
	row := q.db.QueryRowContext(ctx, lastSubmission, arg.ProblemID, arg.LanguageID, arg.UserID)
	var src string
	err := row.Scan(&src)
	return src, err
}
