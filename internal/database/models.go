// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type TestCaseResultStatus string

const (
	TestCaseResultStatusAccepted     TestCaseResultStatus = "Accepted"
	TestCaseResultStatusWrongAnswer  TestCaseResultStatus = "Wrong Answer"
	TestCaseResultStatusTimelimit    TestCaseResultStatus = "Time limit"
	TestCaseResultStatusMemorylimit  TestCaseResultStatus = "Memory limit"
	TestCaseResultStatusCompileerror TestCaseResultStatus = "Compile error"
)

func (e *TestCaseResultStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TestCaseResultStatus(s)
	case string:
		*e = TestCaseResultStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TestCaseResultStatus: %T", src)
	}
	return nil
}

type NullTestCaseResultStatus struct {
	TestCaseResultStatus TestCaseResultStatus
	Valid                bool // Valid is true if TestCaseResultStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTestCaseResultStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TestCaseResultStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TestCaseResultStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTestCaseResultStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TestCaseResultStatus), nil
}

type Example struct {
	ID        string
	Input     string
	Output    string
	ProblemID string
}

type Language struct {
	ID      int32
	Name    string
	Version int32
}

type LanguageProblem struct {
	ID         string
	LanguageID int32
	ProblemID  string
}

type Participation struct {
	ID     string
	Date   time.Time
	UserID string
	QuizID string
}

type Problem struct {
	ID          string
	Description string
	Title       string
	MemoryLimit int32
	TimeLimit   float64
	QuizID      string
}

type Quiz struct {
	ID          string
	Title       string
	Description string
}

type Submission struct {
	ID         string
	Src        string
	Time       time.Time
	ProblemID  string
	UserID     string
	LanguageID int32
}

type TestCase struct {
	ID        string
	Input     string
	Output    string
	ProblemID string
}

type TestCaseResult struct {
	ID           string
	Status       TestCaseResultStatus
	Metrics      int32
	Output       string
	JudgeToken   string
	TestCaseID   string
	SubmissionID string
}

type User struct {
	ID       string
	Name     string
	Email    string
	Password string
}
