// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: experiences.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countExperience = `-- name: CountExperience :one
SELECT COUNT(*) AS count FROM experience WHERE user_id = ?
`

func (q *Queries) CountExperience(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countExperience, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteExperience = `-- name: DeleteExperience :exec
DELETE FROM experience
WHERE id = ? AND user_id = ?
`

type DeleteExperienceParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteExperience(ctx context.Context, arg DeleteExperienceParams) error {
	_, err := q.db.ExecContext(ctx, deleteExperience, arg.ID, arg.UserID)
	return err
}

const insertExperience = `-- name: InsertExperience :exec
INSERT INTO experience
(id, user_id, title, company, start_date, end_date)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertExperienceParams struct {
	ID        string
	UserID    string
	Title     string
	Company   string
	StartDate time.Time
	EndDate   sql.NullTime
}

func (q *Queries) InsertExperience(ctx context.Context, arg InsertExperienceParams) error {
	_, err := q.db.ExecContext(ctx, insertExperience,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Company,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const selectExperience = `-- name: SelectExperience :many
SELECT experience.id, experience.created_at, experience.updated_at, experience.company, experience.title, experience.start_date, experience.end_date, experience.user_id
FROM experience
JOIN user ON experience.user_id = user.id
WHERE user.id = ?
ORDER BY experience.start_date DESC
LIMIT 10
`

func (q *Queries) SelectExperience(ctx context.Context, id string) ([]Experience, error) {
	rows, err := q.db.QueryContext(ctx, selectExperience, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experience
	for rows.Next() {
		var i Experience
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Company,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
