// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: education.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countEducation = `-- name: CountEducation :one
SELECT COUNT(*) AS count FROM education WHERE user_id = ?
`

func (q *Queries) CountEducation(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEducation, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM education
WHERE id = ? AND user_id = ?
`

type DeleteEducationParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteEducation(ctx context.Context, arg DeleteEducationParams) error {
	_, err := q.db.ExecContext(ctx, deleteEducation, arg.ID, arg.UserID)
	return err
}

const insertEducation = `-- name: InsertEducation :exec
INSERT INTO education
(id, user_id, institution, degree, start_date, end_date)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertEducationParams struct {
	ID          string
	UserID      string
	Institution string
	Degree      string
	StartDate   time.Time
	EndDate     sql.NullTime
}

func (q *Queries) InsertEducation(ctx context.Context, arg InsertEducationParams) error {
	_, err := q.db.ExecContext(ctx, insertEducation,
		arg.ID,
		arg.UserID,
		arg.Institution,
		arg.Degree,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const selectEducation = `-- name: SelectEducation :many
SELECT education.id, education.created_at, education.updated_at, education.institution, education.degree, education.start_date, education.end_date, education.user_id
FROM education
JOIN user ON education.user_id = user.id
WHERE user.id = ?
ORDER BY education.start_date DESC
LIMIT 10
`

func (q *Queries) SelectEducation(ctx context.Context, id string) ([]Education, error) {
	rows, err := q.db.QueryContext(ctx, selectEducation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Education
	for rows.Next() {
		var i Education
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Institution,
			&i.Degree,
			&i.StartDate,
			&i.EndDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
