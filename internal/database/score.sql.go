// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: score.sql

package database

import (
	"context"
)

const getScores = `-- name: GetScores :many
SELECT problem.id, MAX(submission.accepted_test_cases) AS accepted_test_cases
FROM submission
INNER JOIN participation ON submission.participation_id = participation.id
INNER JOIN problem ON submission.problem_id = problem.id
WHERE participation.id = ?
GROUP BY problem.id
`

type GetScoresRow struct {
	ID                string
	AcceptedTestCases interface{}
}

func (q *Queries) GetScores(ctx context.Context, id string) ([]GetScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getScores, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoresRow
	for rows.Next() {
		var i GetScoresRow
		if err := rows.Scan(&i.ID, &i.AcceptedTestCases); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
