// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"strings"
)

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM user
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteUsers(ctx context.Context, ids []string) error {
	query := deleteUsers
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const seedUser = `-- name: SeedUser :exec
INSERT INTO user 
(id, name, email, password, role) VALUES
(?, ?, ?, ?, ?)
`

type SeedUserParams struct {
	ID       string
	Name     string
	Email    string
	Password string
	Role     string
}

func (q *Queries) SeedUser(ctx context.Context, arg SeedUserParams) error {
	_, err := q.db.ExecContext(ctx, seedUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	return err
}
