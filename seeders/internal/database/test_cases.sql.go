// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: test_cases.sql

package database

import (
	"context"
	"strings"
)

const deleteTestCases = `-- name: DeleteTestCases :exec
DELETE FROM test_case
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteTestCases(ctx context.Context, ids []string) error {
	query := deleteTestCases
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const seedTestCase = `-- name: SeedTestCase :exec
INSERT INTO test_case
(id, input, output, problem_id) VALUES
(?, ?, ?, ?)
`

type SeedTestCaseParams struct {
	ID        string
	Input     string
	Output    string
	ProblemID string
}

func (q *Queries) SeedTestCase(ctx context.Context, arg SeedTestCaseParams) error {
	_, err := q.db.ExecContext(ctx, seedTestCase,
		arg.ID,
		arg.Input,
		arg.Output,
		arg.ProblemID,
	)
	return err
}
