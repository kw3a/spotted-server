// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: problems.sql

package database

import (
	"context"
	"strings"
)

const deleteProblems = `-- name: DeleteProblems :exec
DELETE FROM problem
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteProblems(ctx context.Context, ids []string) error {
	query := deleteProblems
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const seedProblem = `-- name: SeedProblem :exec
INSERT INTO problem 
(id, description, title, memory_limit, time_limit, quiz_id) VALUES
(?, ?, ?, ?, ?, ?)
`

type SeedProblemParams struct {
	ID          string
	Description string
	Title       string
	MemoryLimit int32
	TimeLimit   float64
	QuizID      string
}

func (q *Queries) SeedProblem(ctx context.Context, arg SeedProblemParams) error {
	_, err := q.db.ExecContext(ctx, seedProblem,
		arg.ID,
		arg.Description,
		arg.Title,
		arg.MemoryLimit,
		arg.TimeLimit,
		arg.QuizID,
	)
	return err
}
