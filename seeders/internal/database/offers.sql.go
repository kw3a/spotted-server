// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: offers.sql

package database

import (
	"context"
	"strings"
)

const deleteOffers = `-- name: DeleteOffers :exec
DELETE FROM offer
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteOffers(ctx context.Context, ids []string) error {
	query := deleteOffers
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const seedOffer = `-- name: SeedOffer :exec
INSERT INTO offer
(id, status, title, about, requirements, benefits, min_wage, max_wage, company_id) VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SeedOfferParams struct {
	ID           string
	Status       int32
	Title        string
	About        string
	Requirements string
	Benefits     string
	MinWage      int32
	MaxWage      int32
	CompanyID    string
}

func (q *Queries) SeedOffer(ctx context.Context, arg SeedOfferParams) error {
	_, err := q.db.ExecContext(ctx, seedOffer,
		arg.ID,
		arg.Status,
		arg.Title,
		arg.About,
		arg.Requirements,
		arg.Benefits,
		arg.MinWage,
		arg.MaxWage,
		arg.CompanyID,
	)
	return err
}
