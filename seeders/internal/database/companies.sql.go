// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: companies.sql

package database

import (
	"context"
	"strings"
)

const deleteCompanies = `-- name: DeleteCompanies :exec
DELETE FROM company
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteCompanies(ctx context.Context, ids []string) error {
	query := deleteCompanies
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const seedCompany = `-- name: SeedCompany :exec
INSERT INTO company
(id, user_id, name, description, website, image_url)
VALUES (?, ?, ?, ?, ?, ?)
`

type SeedCompanyParams struct {
	ID          string
	UserID      string
	Name        string
	Description string
	Website     string
	ImageUrl    string
}

func (q *Queries) SeedCompany(ctx context.Context, arg SeedCompanyParams) error {
	_, err := q.db.ExecContext(ctx, seedCompany,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Website,
		arg.ImageUrl,
	)
	return err
}
